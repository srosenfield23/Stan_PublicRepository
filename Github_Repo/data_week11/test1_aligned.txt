     1	from csv import reader
     2	import sys
     3	import datetime as dt
     4	def parse_cmd_args(args):
     5	    country_list = args[1:]
     6	    return country_list
     7	def read_data(filename):
     8	    opened_file = open(filename)
     9	    read_file = reader(opened_file)
    10	    data = list(read_file)
    11	    data_dict = {'header': data[0], 'data': data[1:]}
    12	    return data_dict
    13	def extract_data_covid19(country, data_dict):
    14	    country_data = []
    15	    for row in data_dict['data']:
    16	        if row[1] == country:
    17	            country_data.append(row)
    18	
    19	    current_date  = dt.datetime.strptime(country_data[-1][0], '%Y-%m-%d')
    20	    final_date = current_date.strftime("%B %d, %Y")
    21	
    22	    new_cases = int(country_data[-1][2])
    23	    new_deaths = int(country_data[-1][3])
    24	    total_cases = int(country_data[-1][4])
    25	    total_deaths = int(country_data[-1][5])
    26	
    27	    weekly_cases = round(float(country_data[-1][6]))
    28	    weekly_deaths = round(float(country_data[-1][7]))
    29	    biweekly_cases = round(float(country_data[-1][8]))
    30	    biweekly_deaths = round(float(country_data[-1][9]))
    31	
    32	    print("This is Covid19 data for: "+final_date)
    33	
    34	    print("New cases are:            ".format(row)+('{:,}'.format(new_cases)))
    35	    print("Weekly cases are:       ".format(row)+('{:,}'.format(weekly_cases)))
    36	    print("Biweekly cases are:     ".format(row)+('{:,}'.format(biweekly_cases)))
    37	    print('Total cases are:       '.format(row)+('{:,}'.format(total_cases)))
    38	
    39	    print('================================')
    40	
    41	    print("New deaths are:             ".format(row)+('{:,}'.format(new_deaths)))
    42	    print("Weekly deaths are:         ".format(row)+('{:,}'.format(weekly_deaths)))
    43	    print("Biweekly deaths are:       ".format(row)+('{:,}'.format(biweekly_deaths)))
    44	    print("Total deaths are:         ".format(row)+('{:,}'.format(total_deaths)))
    45	
    46	    print('=====================================')
    47	
    48	
    49	if __name__ == '__main__':
    50	    country_list = parse_cmd_args(sys.argv)
    51	    data_dict = read_data('full_data.csv')
    52	    data_dict_old = read_data('full_data_24ago.csv')
    53	    data_dict_7day_prior = read_data('covid19-7days_ago.csv')
    54	    data_dict_14day_prior = read_data('covid19-14days_ago.csv')
    55	    data_dict_30day_prior = read_data('covid19-30days_ago.csv')
    56	
    57	    data_dict_population = read_data('2020_population.csv')
    58	    for i in country_list:
    59	        print('Stats for {}:'.format(i))
    60	        extract_data_covid19(i, data_dict)
    61	        for c in data_dict_population['data']:
    62	            if c[0] == i:
    63	                population=int(c[1])
    64	                population_mil=(population) / 1000000
    65	                population_100thou=(population) / 100000
    66	                population_10thou=(population) / 10000
    67	                print('{} Population: '.format(i)+('{:,}'.format(population)))
    68	        print('=====================================')
    69	
    70	        country_data = []
    71	        for row in data_dict['data']:
    72	            if row[1] == i:
    73	                country_data.append(row)
    74	
    75	        country_data_old = []
    76	        for row in data_dict_old['data']:
    77	            if row[1] == i:
    78	                country_data_old.append(row)
    79	
    80	        country_data_7day_prior = []
    81	        for row in data_dict_7day_prior['data']:
    82	            if row[1] == i:
    83	                country_data_7day_prior.append(row)
    84	
    85	        country_data_14day_prior = []
    86	        for row in data_dict_14day_prior['data']:
    87	            if row[1] == i:
    88	                country_data_14day_prior.append(row)
    89	
    90	        country_data_30day_prior = []
    91	        for row in data_dict_30day_prior['data']:
    92	            if row[1] == i:
    93	                country_data_30day_prior.append(row)
    94	
    95	        double_total_cases_30days_ago = int(country_data_30day_prior[-1][4]) * 2
    96	
    97	        total_lives_lost = int(country_data[-1][5]) - int(country_data_7day_prior[-1][5])
    98	        delta_cases_week = int(country_data[-1][4]) - int(country_data_7day_prior[-1][4])
    99	
   100	        new_vs_old_cases = int(country_data[-1][2]) - int(country_data_old[-1][2])
   101	        new_vs_7day_prior_cases = int(country_data[-1][2]) - int(country_data_7day_prior[-1][2])
   102	
   103	        if int(country_data_old[-1][2]) != 0:
   104	            if int(country_data[-1][2])  >=  int(country_data_old[-1][2]):
   105	                change_new_cases = round(((new_vs_old_cases) / int(country_data_old[-1][2])) * 100,2)
   106	                print('%Increase of new cases over yesterday:    '.format(row)+('{:,}'.format(change_new_cases)),'%')
   107	            if int(country_data_old[-1][2]) > int(country_data[-1][2]):
   108	                change_new_cases = round(((new_vs_old_cases) / int(country_data_old[-1][2])) * 100,2)
   109	                print('%Decrease of new cases over yesterday:   '.format(row)+('{:,}'.format(change_new_cases)),'%')
   110	
   111	        if int(country_data_7day_prior[-1][2]) != 0:
   112	            if int(country_data[-1][2])  >=  int(country_data_7day_prior[-1][2]):
   113	                change_new_cases = round(((new_vs_7day_prior_cases) / int(country_data_7day_prior[-1][2])) * 100,2)
   114	                print('%Increase of new cases over week_ago:     '.format(row)+('{:,}'.format(change_new_cases)),'%')
   115	
   116	            if int(country_data_7day_prior[-1][2]) > int(country_data[-1][2]):
   117	                change_new_cases = round(((new_vs_7day_prior_cases) / int(country_data_7day_prior[-1][2])) * 100,2)
   118	                print('%Decrease of new cases over week_ago:     '.format(row)+('{:,}'.format(change_new_cases)),'%')
   119	
   120	        if int(country_data[-1][5]) != 0:
   121	            new_death_ratio = int(country_data[-1][3]) / int(country_data[-1][5])
   122	        else:
   123	            new_death_ratio = 0
   124	        if int(country_data_old[-1][5]) != 0:
   125	            old_death_ratio = int(country_data_old[-1][3]) / int(country_data_old[-1][5])
   126	        else:
   127	            old_death_ratio = 0
   128	
   129	        if int(country_data_7day_prior[-1][5]) != 0:
   130	            new_death_7day_prior_ratio = int(country_data_7day_prior[-1][3]) / int(country_data_7day_prior[-1][5])
   131	        else:
   132	            new_death_7day_prior_ratio = 0
   133	        if  total_lives_lost == 0:
   134	            new_deaths_over_week_deaths = 0
   135	        else:
   136	            new_deaths_over_week_deaths = int(country_data[-1][3]) / (total_lives_lost)
   137	
   138	        current_date  = dt.datetime.strptime(country_data[-1][0], '%Y-%m-%d')
   139	        day_of_week = current_date.strftime("%a")
   140	
   141	        Weekly_rates_of_infection = round((int(country_data[-1][2]) / (population_10thou)) * 100,2) - round((int(country_data_7day_prior[-1][2]) / (population_10thou)) * 100,2)
   142	
   143	        if round((int(country_data[-1][2]) / (population_10thou)) * 100,2) >= round((int(country_data_7day_prior[-1][2]) / (population_10thou)) * 100,2):
   144	            print('Rise in weekly infection rate:            ',round((Weekly_rates_of_infection),2),"%")
   145	        if round((int(country_data[-1][2]) / (population_10thou)) * 100,2) < round((int(country_data_7day_prior[-1][2]) / (population_10thou)) * 100,2):
   146	            print('Fall in weekly infection rate:           ',round((Weekly_rates_of_infection),2),"%")
   147	
   148	        print('Rates of infection/10k capita (today):   ',round((int(country_data[-1][2]) / (population_10thou)) * 100,2),"%")
   149	        print('Rates of infection/10k capita (week_ago):',round((int(country_data_7day_prior[-1][2]) / (population_10thou)) * 100,2),"%")
   150	
   151	        weekly_cases2 = float(country_data[-1][6])
   152	        weekly_case_rate_avg_100k = round(((weekly_cases2) / 7) / (population_100thou), 2)
   153	
   154	        print('Rate of avg weekly cases/100k capita:        '.format(row)+('{:,}'.format(weekly_case_rate_avg_100k)))
   155	
   156	        print('New deaths per 100,000 capita (ideal < .03): ',round((int(country_data[-1][3]) / (population_100thou)), 2))
   157	
   158	        print('Deaths per 100,000 capita (today):           ',round((int(country_data[-1][5]) / (population_100thou)), 2))
   159	        print('Deaths per 100,000 capita (week_ago):        ',round((int(country_data_7day_prior[-1][5]) / (population_100thou)), 2))
   160	
   161	        print("New cases rate (today vs yesterday):        ",round(((int(country_data[-1][2]) / int(country_data[-1][4])) - (int(country_data_old[-1][2]) / int(country_data_old[-1][4]))) * 100, 2),"%")
   162	        print("New cases rate (today vs week_ago):         ",round(((int(country_data[-1][2]) / int(country_data[-1][4])) - (int(country_data_7day_prior[-1][2]) / int(country_data_7day_prior[-1][4]))) * 100, 2),"%")
   163	
   164	        print("New death rate (today vs yesterday):         ",round(((new_death_ratio) - (old_death_ratio)) * 100,2),"%")
   165	        print("New death rate (today vs week_ago):         ",round(((new_death_ratio) - (new_death_7day_prior_ratio)) * 100,2),"%")
   166	
   167	        print('Fatality rate(total death over total case):       ',round((int(country_data[-1][5]) / int(country_data[-1][4])) * 100, 2),"%")
   168	        print("New deaths over lives lost since last",day_of_week,":      ",round((new_deaths_over_week_deaths) * 100),"%")
   169	
   170	        increase_n_total = round((delta_cases_week) / int(country_data_7day_prior[-1][4]) * 100,1)
   171	
   172	        if increase_n_total >= 0:
   173	            print("Increase in total cases since last",day_of_week, ":          ".format(row)+('{:,}'.format(increase_n_total)),"%")
   174	        else:
   175	            print("Decrease in total cases since last",day_of_week, ":          ".format(row)+('{:,}'.format(increase_n_total)),"%")
   176	
   177	        avg_total_cases_14_days = round((int(country_data[-1][4]) - int(country_data_14day_prior[-1][4])) / 14, 2)
   178	
   179	        if avg_total_cases_14_days != 0 and int(country_data[-1][2]) >= 0:
   180	            if int(country_data[-1][2]) >=  0 and (int(country_data[-1][2]) <= (avg_total_cases_14_days)):
   181	                print('Percent of new cases below 14 day avg:           ',round(int(country_data[-1][2]) / (avg_total_cases_14_days) * 100 -100),"%")
   182	            if int(country_data[-1][2]) > 0 and (int(country_data[-1][2]) > (avg_total_cases_14_days)) :
   183	                print('Percent of new cases above 14 day avg:            ',round(int(country_data[-1][2]) / (avg_total_cases_14_days) * 100 -100),"%")
   184	
   185	        if avg_total_cases_14_days > 3:
   186	            avg_total_cases_14_days = round((int(country_data[-1][4]) - int(country_data_14day_prior[-1][4])) / 14)
   187	
   188	        avg_total_cases_30_days = round((int(country_data[-1][4]) - int(country_data_30day_prior[-1][4])) / 30, 2)
   189	        avg_deaths_30_days = round((int(country_data[-1][5]) - int(country_data_30day_prior[-1][5])) / 30, 2)
   190	
   191	        if avg_total_cases_30_days != 0 and int(country_data[-1][2]) >= 0:
   192	            if int(country_data[-1][2]) >=  0 and (int(country_data[-1][2]) <= (avg_total_cases_30_days)):
   193	                print('Percent of new cases below 30 day avg:           ',round(int(country_data[-1][2]) / (avg_total_cases_30_days) * 100 -100),"%")
   194	            if int(country_data[-1][2]) > 0 and (int(country_data[-1][2]) > (avg_total_cases_30_days)) :
   195	                print('Percent of new cases above 30 day avg:           ',round(int(country_data[-1][2]) / (avg_total_cases_30_days) * 100 -100),"%")
   196	
   197	        if avg_total_cases_30_days > 3:
   198	            avg_total_cases_30_days = round((int(country_data[-1][4]) - int(country_data_30day_prior[-1][4])) / 30)
   199	        if avg_deaths_30_days > 3:
   200	            avg_deaths_30_days = round((int(country_data[-1][5]) - int(country_data_30day_prior[-1][5])) / 30)
   201	
   202	        print('Avg new daily cases in last 14 days:             '.format(row)+('{:,}'.format(avg_total_cases_14_days)))
   203	        print('Avg new daily cases in last 30 days:             '.format(row)+('{:,}'.format(avg_total_cases_30_days)))
   204	
   205	        print('Avg new daily deaths in last 30 days:              '.format(row)+('{:,}'.format(avg_deaths_30_days)))
   206	
   207	        print("Total lives lost since last",day_of_week,":                 ".format(row)+('{:,}'.format(total_lives_lost)))
   208	
   209	        if int(country_data[-1][4]) > (double_total_cases_30days_ago):
   210	            print('Total cases if doubled in last 30 days: **HOT_SPOT')
   211	        else:
   212	            print('Total cases if doubled in last 30 days:         Negative')
   213	
   214	        print('\n')
   215	
   216	print ('*   The date of the data above reflects the date of')
   217	print ('     reporting, not necessarily reflects the confirmed')
   218	print ('     case and death figures on that given day.')
   219	print("%s: %s" % ("(Data Source",
   220	"https://ourworldindata.org/coronavirus-source-data)"))
   221	print('\n')
   222	
   223	print ("** HOT_SPOT status & location determine by Guam")
   224	print ("   Public Health, in consultation with governor")
   225	print ("   and state surgeon physicians' advisory group.")
   226	print("%s: %s" % ("(Source",
   227	"https://www.postguam.com/news/local/epidemiologist-philippines-not-the-only-hot-spot/article_67e9e650-aac2-11ea-adb8-db95d33c4632.html)"))
   228	print('\n')
   229	
   230	print ('*** As stated by Dr Christopher Murray, director of')
   231	print ('      the Institute for Health Metrics and Evaluation')
   232	print ('      (IHME): He defined the end of this “wave” as a')
   233	print ('      ratio of: 0.3 deaths per 1 million people.    ')
   234	print ('      Equivalent to: 0.03 deaths per 100,000 capita.')
   235	print("%s: %s" % ("(Source",
   236	"https://www.theguardian.com/world/2020/apr/07/uk-will-be-europes-worst-hit-by-coronavirus-study-predicts)"))
   237	print('\n')
   238	
   239	print ('* New cases rate defined as: the percentage ratio')
   240	print ("   between today's new cases over total cases,")
   241	print ("   minus yesterday's new cases over total cases.")
   242	print('\n')
   243	
   244	print ('* Rates of infection defined as: the percentage ratio')
   245	print ("   between today's new cases over 10,000 per capita")
   246	print('\n')
   247	
   248	print ('*** Death Rate defined as: the percentage ratio ')
   249	print ("      between today's new deaths over total deaths,")
   250	print ("      minus yesterday's new deaths over total deaths.")
   251	print('\n')
   252	
   253	print ('*** Economist Intelligence Unit (EIU) analysts')
   254	print ('      said in a note: Death ratios will depend')
   255	print ('      on the capacity of countries to effectively')
   256	print ('      detect, track, and contain the epidemic.')
   257	print("%s: %s" % ("(Source","https://www.cnbc.com/2020/03/18/coronavirus-will-infect-half-the-global-population-eiu-predicts.html)"))
   258	print('\n')
   259	
